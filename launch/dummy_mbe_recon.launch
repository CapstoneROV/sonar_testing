<launch>
    <!-- Arguments -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="name" default="dummy"/>
    <arg name="topics_ns" default="dummy"/>
  
    <!-- Send URDF to param server -->
    <param name="robot_description" command="xacro $(find sonar_testing)/robots/dummy.urdf.xacro"/>
  
    <!-- Launch world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="debug" value="$(arg debug)"/>
      <arg name="gui" value="$(arg gui)"/>
      <arg name="paused" value="$(arg paused)"/>
      <arg name="use_sim_time" value="$(arg use_sim_time)"/>
      <arg name="headless" value="$(arg headless)"/>
    </include>
  
    <!-- This can be run in terminal after launching world, e.g. 'roslaunch gazebo_ros empty_world.launch -->
    <node name="spawn_robot" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -z 1 -model dummy" respawn="false" output="screen"/>
  
    <!-- Launch RVIZ -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find sonar_testing)/rviz/sonar_view_mbe_reconstruct.rviz"/>
  
    <!-- Publish robot TF, using joint states published in the URDF -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="dummy_publisher">
        <remap from="/joint_states" to="/dummy/joint_states"/>
    </node>
  
    <!-- Bridge map and base_link, using gazebo_ros_p3d output in the URDF -->
    <node pkg="message_to_tf" type="message_to_tf" name="map_to_dummy" args="dummy/base_link"/>
  
    <!-- Launch sonar image converters, from fan shape to rectangular -->
    <node name="mbe_transformer" pkg="sonar_testing" type="sonar_transformer">
      <param name="fan_topic" value="/dummy/mbe_sonar"/>
      <param name="rect_topic" value="/dummy/mbe_sonar_rect"/>
      <param name="origin_x" value="512"/>
      <param name="origin_y" value="512"/>
      <param name="top_x" value="0"/>
      <param name="top_y" value="512"/>
      <param name="beam_count" value="256"/>
      <param name="bin_count" value="512"/>
      <param name="horizontal_fov" value="1.57079632679"/>
    </node>
    <node name="ping360_transformer" pkg="sonar_testing" type="sonar_transformer">
      <param name="fan_topic" value="/dummy/ping360_sonar"/>
      <param name="rect_topic" value="/dummy/ping360_sonar_rect"/>
      <param name="origin_x" value="512"/>
      <param name="origin_y" value="512"/>
      <param name="top_x" value="0"/>
      <param name="top_y" value="512"/>
      <param name="beam_count" value="128"/>
      <param name="bin_count" value="512"/>
      <param name="horizontal_fov" value="2.09439510239"/>
      <param name="ccw_offset" value="0.0"/>
    </node>
    <node name="mbe_3d_reconstruction" pkg="sonar_testing" type="3d_reconstruction">
      <param name="rect_topic" value="/dummy/mbe_sonar_rect"/>
      <param name="edge_topic" value="/dummy/mbe_sonar_edge"/>
      <param name="pcl_topic" value="/dummy/mbe_line_scan"/>
      <param name="sonar_frame" value="mbe_sonar_link"/>
      <param name="world_frame" value="map"/>
      <param name="threshold" value="30"/>
      <param name="min_area" value="20"/>
      <param name="min_ratio" value="0.05"/>
      <param name="min_range" value="0.5"/>
      <param name="max_range" value="10.0"/>
      <param name="horizontal_fov" value="1.57079632679"/>
      <param name="vertical_fov" value="0.34906585039"/>
    </node>
    <node name="pointcloud_registration" pkg="pointcloud_registration" type="pointcloud_registration_node">
      <param name="subscribe_pointcloud_topic" value="/dummy/mbe_line_scan"></param>
      <param name="publish_merged_pointcloud_topic" value="/mbe_reconstructed_pointcloud"></param>
    </node>
  </launch>
  